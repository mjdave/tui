value = 10
table = {
    subValue = 20
    subTable = {
        subValue = 30 // creates a new local table.subTable.subValue with the value 30
        
        ..subValue = value // this assigns 10 to the parent subValue (previously 20)
        print(..subValue)
        
        ...value = 20 // we can go up multiple levels by adding dots, this modifies the variable created at the top level on the first line
        
        testValue = 1
        
        testFunction = function(valueToSet) { // the same rules apply for functions
            ..testValue = value + 1 // 21 the first time, 101 the second, remember we can always *read* the higher level variables directly
            ....value = valueToSet // 4 dots this time to modify
        }

        testFunction(100)

    }
    
    outsideFunc = subTable.testFunction // we can grab a reference to that subTable's function and call it directly here
    outsideFunc(200) // ..value is now 200. '....value' still works, because we find variables relative to where the function was defined, not where it is called
}

print(table)

// outout:
// 10
// {
//     "outsideFunc" = function,
//     "subTable" = {
//         "subValue" = 30,
//         "testFunction" = function,
//         "testValue" = 101,
//     },
//     "subValue" = 200,
// }