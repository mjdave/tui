testCommon = require("tests/testCommon.tui")
assert = testCommon.assert
getLineNumber = debug.getLineNumber

emptyTable = {}
assert(emptyTable[2] == nil, "emptyTable[2] == nil")

testAdd = function(a,b)
{
    return a + b
}

testSub = function(a,b)
{
    return a - b
}

testMult = function(a,b)
{
    return a * b
}

testDivide = function(a,b)
{
    return a / b
}

testGreaterThan = function(a,b)
{
    return a > b
}

testEqualTo = function(a,b)
{
    return a == b
}

testGreaterThanEqualTo = function(a,b)
{
    return a >= b
}

testLessThanEqualTo = function(a,b)
{
    return a <= b
}

testNotLogicalOperators = function(somethingTrue)
{
    somethingFalse = !somethingTrue
    
    assert(somethingTrue == true, "somethingTrue == true")
    assert(somethingTrue, "somethingTrue")
    assert(somethingFalse == false, "somethingFalse == false")
    assert(!somethingFalse, "!somethingFalse")
    assert(!nothing == true, "!nothing == true")

    somethingFalse = 4 != 4
    assert(somethingFalse == false, "4 != 4 == false")
}

varTen = 10

testNotLogicalOperators(2 != (2 + 2))
notEqualPassTest = 4 != 5
assert(notEqualPassTest == true, "notEqualPassTest == true")
notEqualFailTest = 4 != 4
assert(notEqualFailTest == false, "notEqualFailTest == false")

assert(testAdd(2,8) == 10, "testAdd(2,8) == 10")
assert((2 + 8) == 10, "(2 + 8) == 10")
assert(testSub(20,varTen) == 10, "testSub(20,varTen) == 10")
assert((20 - varTen) == 10, "(20 - 10) == 10")
assert(testMult(5,5) == 25, "testMult(5,5) == 25")
assert(testDivide(100,10) == 10, "testDivide(100,10) == 10")
assert(testGreaterThan(100,10), "testGreaterThan(100,10)")
assert(testGreaterThanEqualTo(9,10) == false, "testGreaterThanEqualTo(9,10) = false")
assert(testGreaterThanEqualTo(10,varTen), "testGreaterThanEqualTo(10,varTen)")
assert(testGreaterThanEqualTo(11,10), "testGreaterThanEqualTo(11,10)")
assert(testLessThanEqualTo(9,10), "testLessThanEqualTo(9,10)")
assert(testLessThanEqualTo(10,varTen), "testLessThanEqualTo(10,varTen)")
assert(testLessThanEqualTo(11,10) == false, "testLessThanEqualTo(11,10 = false)")
assert(testEqualTo(20,10) == false, "testEqualTo(20,10) == false")
assert(testEqualTo(10,20) == false, "testEqualTo(10,20) == false")
assert(testEqualTo(varTen,10) == true, "testEqualTo(varTen,10) == true")
assert(testEqualTo(10,"10") == false, "testEqualTo(10,\"10\") == false")
assert(testEqualTo("10","10") == true, 'testEqualTo("10","10") == true')
assert(testEqualTo("hello","10") == false, "testEqualTo('hello','10') == false")

assert(testAdd(vec2(2,2),vec2(8,8)) == vec2(10,10), "testAdd(vec2(2,2),vec2(8,8)) == vec2(10,10)")
assert(testSub(vec2(20,20),vec2(10,10)) == vec2(10,10), "testSub(vec2(20,20),vec2(10,10))")
assert(testMult(vec2(5, 5), 5) == vec2(25,25), "testMult(vec2(5, 5), 5)")
assert(testDivide(vec2(100, 100), vec2(10, 10)) == vec2(10,10), "testDivide(vec2(100, 100), vec2(10, 10))")

assert(testMult(vec2(5, 5), 5) == vec2(25,25), "testMult(vec2(5, 5), 5)")
assert(testDivide(vec2(100, 100), 10) == vec2(10,10), "testDivide(vec2(100, 100), 10)")

assert(testAdd(vec3(2,2,2),vec3(8,8,8)) == vec3(10,10,10), "testAdd(vec3(2,2,2),vec3(8,8,2))")
assert(testSub(vec3(20,20,20),vec3(varTen,10,10)) == vec3(10,10,10), "testSub(vec3(20,20,20),vec3(varTen,10,10))")
assert(testMult(vec3(5, 5,5), 5) == vec3(25,25,25), "testMult(vec3(5, 5,5), 5)")
assert(testDivide(vec3(100, 100,100), vec3(10, 10,10)) == vec3(10,varTen,10), "testDivide(vec3(100, 100,100), vec3(10, 10,10))")

assert(testMult(vec3(5, 5,5), 5) == vec3(25,25,25), "testMult(vec3(5, 5,5), 5)")
assert(testDivide(vec3(100, 100, 100), 10) == vec3(10,10,10), "testDivide(vec3(100, 100, 100), 10)")

assert(type(5) == "number", "type(5) == number")
assert(type(varTen) == "number", "type(varTen) == number")
assert(type("hello") == "string", "type(hello) == string")
assert(type({5}) == "table", "type({5}) == table")
assert(type(true) == "bool", "type(true) == bool")
assert(type(vec2(1,2)) == "vec2", "type(vec2(1,2)) == vec2")
assert(type(vec3(1,2,3)) == "vec3", "type(vec3(1,2,3)) == vec3")
assert(type(vec4(1,2,3,4)) == "vec4", "type(vec4(1,2,3,4)) == vec4")

testTable = {
    "zero",
    "one",
    "two",
    "four",
    "five"
}
table.insert(testTable, 3, "three")
print(testTable)
assert(testTable[3] == "three", "testTable[3] == three")
testTable[2] = 2.0
assert(testTable[2] == 2, "testTable[2] == 2")

testTable[7] = "seven"
assert(testTable[7] == "seven", "testTable[7] == seven")
assert(testTable[6] == nil, "testTable[6] == nil")

print(testTable)

notTrue = !true
assert(notTrue == false, "notTrue == false")

array = {1,2,3,4,5}
sum = 0
for(object in array)
{
    sum = sum + object
}
assert(sum == 15, "for array loop")

sum = 0
for(index,object in array)
{
    sum = sum + object + index
}
assert(sum == 25, "for array index loop")

test13 = (4 * (3 + 1) + 4) - 1 - 2 * (2 + 1)
assert(test13 == 13, "expression 1 - variable")
assert(((4 * (3 + 1) + 4) - 1 - 2 * (2 + 1)) == 13, "expression 1 - call")

testTrue = 7 * 2 - 5 == 9
assert(testTrue, "expression 2 - variable")
assert(7 * 2 - 5 == 9, "expression 2 - wrapped")

assert(1 + 2 * 3 * 4 - 5 * 4 + 12 / 2 == 11, "expression 3")

expression3Function = function()
{
    return 1 + 2 * 3 * 4 - 5 * 4 + 12 / 2 == 11
}
assert(expression3Function(), "expression 3 - function")

orTrue = (1 == 2) or (2 == 2)
assert(orTrue, "orTrue 1")

orTrue = (2 == 2) or (1 == 2)
assert(orTrue, "orTrue 2")

orTrue = 1 == 2 or 2 == 2
assert(orTrue, "orTrue 3")

orFalse = (2 == 3) or (1 == 2)
assert(!orFalse, "orFalse 1")

orFalse = (2 == 3 or 1 == 2)
assert(!orFalse, "orFalse 2")


andTrue = (1 == 1) and (2 == 2)
assert(andTrue, "andTrue 1")

andTrue = (2 == 2) and (1 != 2)
assert(andTrue, "andTrue 2")

andTrue = 1 == 1 and 2 == 2
assert(andTrue, "andTrue 3")

andFalse = (2 == 2) and (1 == 2)
assert(!andFalse, "andFalse 1")

andFalse = (2 == 3 and 1 == 1)
assert(!andFalse, "andFalse 2")

andFalse = (2 != 3 and 1 != 1)
assert(!andFalse, "andFalse 3")

orAndFunction = function()
{
    orTrue = (1 == 2) or (2 == 2)
    assert(orTrue, "function orTrue 1")

    orTrue = (2 == 2) or (1 == 2)
    assert(orTrue, "function orTrue 2")

    orTrue = 1 == 2 or 2 == 2
    assert(orTrue, "function orTrue 3")

    orFalse = (2 == 3) or (1 == 2)
    assert(!orFalse, "function orFalse 1")

    orFalse = (2 == 3 or 1 == 2)
    assert(!orFalse, "function orFalse 2")


    andTrue = (1 == 1) and (2 == 2)
    assert(andTrue, "function andTrue 1")

    andTrue = (2 == 2) and (1 != 2)
    assert(andTrue, "function andTrue 2")

    andTrue = 1 == 1 and 2 == 2
    assert(andTrue, "function andTrue 3")

    andFalse = (2 == 2) and (1 == 2)
    assert(!andFalse, "function andFalse 1")

    andFalse = (2 == 3 and 1 == 1)
    assert(!andFalse, "function andFalse 2")

    andFalse = (2 != 3 and 1 != 1)
    assert(!andFalse, "function andFalse 3")
}

orAndFunction()

chainTable = {
    sub = {
        x = "a"
        func = function()
        {
            return "b"
        }

        varFunc = function(var)
        {
            return var
        }
    }
}

testVarChains = function()
{
    assert(chainTable.sub.varFunc("d") == "d", getLineNumber())
    assert("d" == chainTable.sub.varFunc("d") , getLineNumber())

    assert(chainTable.sub.x == "a", getLineNumber())
    chainTable.sub.x = "c"
    assert(chainTable.sub.x == "c", getLineNumber())
    readVar = chainTable.sub.x
    assert(readVar == "c", getLineNumber())
    readVar = "d"
    assert(readVar == "d", getLineNumber())
    assert(chainTable.sub.x == "c", getLineNumber())

    assert(chainTable.sub.func() == "b", getLineNumber())
}

testVarChains()

scopeA = "a"
testScopeFunction = function()
{
    assert(scopeA == "a", getLineNumber())
    scopeA = "b"
    assert(scopeA == "b", getLineNumber())
}

testScopeFunction()
assert(scopeA == "a", getLineNumber())

testArray = {
    "zero",
    "one",
    "two",
    {
        "rock",
        "paper",
        function()
        {
            return "scissors"
        }
    }
}

testArrayFunc = function()
{
    two = testArray[1+1]
    assert(two == "two", getLineNumber())
    assert(testArray[1+1] == "two", getLineNumber())
    assert(testArray[3][1] == "paper", getLineNumber())
    assert(testArray[3][2]() == "scissors", getLineNumber())

    two = 1
    two++
    assert(two == 2, getLineNumber())
    two+=2
    assert(two == 4, getLineNumber())

    testArray[2] = "giraffe"
    assert(testArray[2] == "giraffe", getLineNumber())
}

testArrayFunc()

testVar = "a"
testFunc = function()
{
    innerTable = {
        innerFunc = function()
        {
            innerInnerFunc = function()
            {
                .testVar = "b"
            }
            innerInnerFunc()
        }
        innerFunc()
    }
}
testFunc()
assert(testVar == "b", getLineNumber())

testTableConstructorFunc = function()
{
    constructedTable = {
        numberSixty = 57 + 3
        func = function(val)
        {
            if(val == 0)
            {
                return "hello"
            }
            else
            {
                return "goodbye"
            }
        }
        "zero",
        "one",
        "two"
    }

    return constructedTable
}

constructedTableLocal = testTableConstructorFunc()
assert(constructedTableLocal.func(0) == "hello", getLineNumber())
assert(constructedTableLocal.func(1) == "goodbye", getLineNumber())
assert(constructedTableLocal[1] == "one", getLineNumber())
assert(constructedTableLocal.numberSixty == 60, getLineNumber())

testVecs = function()
{
    a = vec2(1,2)
    a.x = 2
    a.y = 3

    b = vec3(1,2,3)
    b.x = 2
    b.y = 3
    b.z = a.x * b.x

    c = vec4(1,2,3,4)
    c.x = 2
    c.y = 3
    c.z = 4
    c.w = 5

    assert(c.w == 5, getLineNumber())
    assert(a == vec2(2,3), getLineNumber())
    assert(b == vec3(2,3,4), getLineNumber())
    assert(c == vec4(2,3,4,5), getLineNumber())
}

testVecs()

inPlaceTestTable = {
    posa = vec2(10,20)
    posb = vec3(10,20,30)
    posc = vec4(10,20,20,40)
}

testInPlace = function()
{
    inPlaceTestTable.posa.x++
    inPlaceTestTable.posa.y += 10
    assert(inPlaceTestTable.posa == vec2(11,30), getLineNumber())

    inPlaceTestTable.posb.x--
    inPlaceTestTable.posb.y -= 10
    inPlaceTestTable.posb.z *= 2

    assert(inPlaceTestTable.posb == vec3(9,10,60), getLineNumber())

    inPlaceTestTable.posc.x += inPlaceTestTable.posa.x
    inPlaceTestTable.posc.w /= 2

    assert(inPlaceTestTable.posc == vec4(21,20,20,20), getLineNumber())
}

testInPlace()

assert(debug.getLineNumber() == 418, "debug.getLineNumber()")
print("lineNumber 419:", debug.getLineNumber())
print("fileName:", debug.getFileName())

testCommon.printResult()
