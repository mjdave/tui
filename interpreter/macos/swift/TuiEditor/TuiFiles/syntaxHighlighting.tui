#
# Some very basic syntax highlighting
#

colors = {
    grey = "0x777777"
    yellow = "0xBBBB00"
    pink = "0xFF55AA"
}

keywords = {
    "for"
    "while"
    "if"
    "in"
    "return"
    "else"
}

colorMap = {
    comments = colors.grey
    keywords = colors.pink
    functions = colors.yellow
}

script = currentScript()

for (keyword in keywords) {
    keywordColor = colorMap["keywords"]
    keywordSearch = string.format("%s ", keyword)
    replacement = string.format("^[%s](color: %s) ", keyword, keywordColor)
    temp = replaceString(script, keywordSearch, replacement)
    script = temp
}

commentHighlighting = function(line) {
    if (string.subString(line, 0, 1) == "#") {
        commentColor = colorMap["comments"]
        replacement = string.format("^[%s](color: %s)", line, commentColor)
        return replacement
    } else if (string.subString(line, 0, 2) == "//") {
        commentColor = colorMap["comments"]
        replacement = string.format("^[%s](color: %s)", line, commentColor)
        return replacement
    } else {
        return line
    }
}

functionHighlighting = function(line) {
    newLine = line
    count = string.length(line)
    firstCharIndex = nil
    functionNameCount = 0
    functionColor = colorMap["functions"]
    
    for (i = 0, i < count, i++) {
        currentChar = string.subString(line, i, 1)
        
        charIndex = string.find("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.", currentChar)
        if (charIndex) {
        // if currentChar is `a` we will never get here
        // else check for `a` overcomes this for now
            if (!firstCharIndex) {
                firstCharIndex = i
            }
            functionNameCount += 1
        } else if (currentChar == "a") {
            if (!firstCharIndex) {
                firstCharIndex = i
            }
            functionNameCount += 1
        } else if (currentChar == "(") {
            if (firstCharIndex) {
                functionName = string.subString(line, firstCharIndex, functionNameCount)
                replacement = string.format("^[%s](color: %s)", functionName, functionColor)
                temp = replaceString(newLine, functionName, replacement, firstCharIndex)
                newLine = temp
                firstCharIndex = nil
                functionNameCount = 0
            } else {
                firstCharIndex = nil
                functionNameCount = 0
            }
        } else {
            firstCharIndex = nil
            functionNameCount = 0
        }
    }
    
    return newLine
}

syntaxHighlightScript = function(script) {
    newLines = ""
    lines = splitString(script, "\n")
    count = table.count(lines)
    for (i = 0, i < count, i++) {
        currentLine = lines[i]
        modifiedLine = functionHighlighting(currentLine)
        modifiedLine = commentHighlighting(modifiedLine)
        .newLines = string.format("%s%s\n", newLines, modifiedLine)
    }
    return newLines
}

result = syntaxHighlightScript(script)

returnValue = result
